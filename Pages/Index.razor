@inject IJSRuntime jsRuntime;
@page "/"

<pre>
<table @ref="mapElement" tabindex="0" @onkeydown="OnKeyDown" @onkeyup="OnKeyUp">
@for (int y = 0; y < 11; y++)
{
    <tr>
    @for (int x = 0; x < 16; x++)
    {
        <td class="@displayMap[x,y].ToString()" >@ToCharacter(displayMap[x, y])</td>
    }
    </tr>
}
</table>
</pre>


@code{
    private static Random rand = new Random();
    private GameTiles[,] displayMap;
    private GameTiles[,] originalMap;
    private int playerX, playerY;
    private Task task;
    private string buttonText = "Pause";
    private bool paused;
    private ElementReference mapElement;

    protected override void OnInitialized()
    {
        Console.WriteLine("Initialized");
        playerX = 7;
        playerY = 8;
        displayMap = MapLoader.Load(Maps.H8);
        originalMap = MapLoader.Load(Maps.H8);
        displayMap[playerX, playerY] = GameTiles.Hero;
        task = Task.Run(Update);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        Console.WriteLine("Attempting to focus map");
        await jsRuntime.InvokeVoidAsync("setFocusToElement", mapElement);
    }

    public void TogglePause()
    {
        paused = !paused;
        buttonText = paused ? "Unpause" : "Pause";
    }

    public void OnKeyDown(KeyboardEventArgs e)
    {
        @* Console.WriteLine("Key down: " + e.Key); *@
    }

    public void OnKeyUp(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "ArrowUp":
                displayMap[playerX, playerY] = originalMap[playerX, playerY];
                playerY--;
                if (playerY < 0) playerY = 0;
                displayMap[playerX, playerY] = GameTiles.Hero;
                break;
            case "ArrowDown":
                displayMap[playerX, playerY] = originalMap[playerX, playerY];
                playerY++;
                if (playerY >= 11) playerY = 10;
                displayMap[playerX, playerY] = GameTiles.Hero;
                break;
            case "ArrowLeft":
                displayMap[playerX, playerY] = originalMap[playerX, playerY];
                playerX--;
                if (playerX < 0) playerX = 0;
                displayMap[playerX, playerY] = GameTiles.Hero;
                break;
            case "ArrowRight":
                displayMap[playerX, playerY] = originalMap[playerX, playerY];
                playerX++;
                if (playerX >= 16) playerX = 15;
                displayMap[playerX, playerY] = GameTiles.Hero;
                break;
        }
        this.StateHasChanged();
    }

    private async Task Update()
    {
        paused = false;
        while (true)
        {
            if (!paused) Step();
            await Task.Delay(TimeSpan.FromSeconds(0.5));
        }
    }

    char[] characters = new[] { '@', '©', '⁕', '⁂' };

    public void Step()
    {
        @* var yPosition = rand.Next(map.GetLength(0));
        var xPosition = rand.Next(map.GetLength(1));
        Console.WriteLine($"Changing ({xPosition}, {yPosition})"); *@
        @* map[yPosition, xPosition] = characters[rand.Next(characters.Length)]; *@
        this.StateHasChanged();
    }

    public char ToCharacter(GameTiles tile)
    {
        switch(tile)
        {
            case GameTiles.Empty:
                return ' ';
            case GameTiles.GreenRock:
                return (char)182;
            case GameTiles.Hero:
                return '☻';
            case GameTiles.Cave:
                return ' ';
            default:
                return 'X';
        }
    }

    public string PrintMap(GameTiles[,] map)
    {
        var result = "";
        for (int y = 0; y < 11; y++)
        {
            for (int x = 0; x < 16; x++)
            {
                result += map[x, y];
            }
            result += "\r\n";
        }
        return result;
    }


}